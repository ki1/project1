/**
 * @group css.mixins.mixins
 *
 * Here we define the reusable helper mixins
 *
 * ## Usage
 * Import into your main file using
 *
 *
 *
 * ## Additional
 * Please note that we use auto prefixr for browser prefixes, so please use this for custom mixins
 *
 * @example
 *     @include transition(all 0.3s ease-out);
 */


/**
 * Adds a size and line height and optional font family
 *
 * @param {Number/String} $fontSize (1.6)
 * @param {Number/String} $lineHeight ($fontSize * 1.5)
 * @param {String} $fontFamily (inherit)
 *
 * @example
 *     @include font(14, 16, $f-opensans);
 *
 * @example
 *     @include font(14, 16);
 */

@mixin font($fontSize: 1.6, $lineHeight: $fontSize * 1.5, $fontFamily: inherit) {
    @if $fontFamily !=inherit {
        font-family: $fontFamily;
    }
    font-size: ($fontSize / 10) + rem;
    line-height: ($lineHeight / 10) + rem;
}

@mixin font-size($sizeValue: 16) {
  font-size: $sizeValue + px;
  font-size: ($sizeValue / 10) + rem;
}

@mixin line-height($sizeValue: 16) {
  line-height: $sizeValue + px;
  line-height: ($sizeValue / 10) + rem;
}

@mixin imageOverlay($top, $topMob) {
    &__overlays {
        position: absolute;
        top: $topMob;
        width: 100%;
        height: 100%;

        @media (min-width: $screen-sm) {
            top: $top;
        }

        .image-overlay {
            &--left, &--right {
                width: auto;
                max-width: 45%;
            
                img {
                width: auto;
                max-width: 100%;
                }
            }
            
            &--left {
                float: left;
            }
            
            &--right {
                float: right;
            }
        }
    }
}

/**
 * Ensures responsive images have the correct size before they load
 *
 * @param {Number} $width
 * @param {Number} $height
 *
 * @example
 *     @include aspect-ratio(750, 500, );
 */
@mixin aspect-ratio($width, $height, $target: 'img') {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
 /*
  > $target {
    @include abs-position(0,0,0,0);
  }
  */
}

/**
 * Adds transparency to an element
 *
 * @param {string} $color
 * @param {string} $alpha
 *
 * @example
 *     @include background-transparent(#000, .8);
 */

@mixin background-transparent($color, $alpha) {
    $rgba: rgba($color, $alpha);
    $ie-hex-str: ie-hex-str($rgba);
    background-color: transparent;
    background-color: $rgba;
}

@mixin stripes($color1, $color2) {
    background: repeating-linear-gradient(
    45deg,
    $color1,
    $color1 1px,
    $color2 1px,
    $color2 2px
  );
}


/**
 * @param {number} $deg (0)
 *
 * @example
 *     @include rotate(180);
 *
 */

@mixin rotate($deg: 0) {
    -moz-transform: rotate($deg + deg);
    -o-transform: rotate($deg + deg);
    -webkit-transform: rotate($deg + deg);
    -ms-transform: rotate($deg + deg);
    transform: rotate($deg + deg);
    zoom: 1;
}


/**
 * user-select
 *
 * @param {string} $value
 *
 * @example
 *     @include user-select(none);
 *
 */

@mixin user-select($value: auto) {
    -webkit-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}


/**
 * Absolute Positioned
 *
 * @param {size} $top (auto)
 * @param {size} $right (auto)
 * @param {size} $bottom (auto)
 * @param {size} $left (auto)
 *
 * @example
 *     @include abs-position(5px, 20px, 10px, 15px);
 */

@mixin abs-position ($top: auto, $right: auto, $bottom: auto, $left: auto) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}


/**
 * Retina Images
 *
 * @param {string} $image
 * @param {size} $width
 * @param {size} $height
 *
 * @example
 *      @include image-2x("logo2x.png", 100px, 25px);
 */

 
/*
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
        //  on retina, use image that's scaled by 2 
        background-image: url($image);
        background-size: $width $height;
    }
}
*/

/**
 * Visually hidden, but have it available for screen readers
 *
 * @example
 *     @include vhdn;
 */

@mixin vhdn {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}


/**
 * Remove visually hidden
 *
 * @example
 *     @include vhdn-off;
 */

@mixin vhdn-off {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}


/**
 * Antialias Text
 *
 * @example
 *     @include anti-alias-text;
 */

@mixin anti-alias-text {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}


/**
 * Absolute Position Cover
 *
 * @example
 *     @include abs-cover;
 */

@mixin abs-cover {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}


/**
 * Break Word
 *
 * @example
 *     @include break-word;
 */

@mixin break-word {
    word-wrap: break-word;
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
}


/**
 * CSS Triangles
 *
 * @param $dir
 */

@mixin triangle($dir, $size, $color) {
    border: $size transparent solid;
    @if ($dir=="top" or $dir=="up") {
        border-bottom-color: $color;
    }
    @else if ($dir=="right" or $dir=="after") {
        border-left-color: $color;
    }
    @else if ($dir=="bottom" or $dir=="down") {
        border-top-color: $color;
    }
    @else if ($dir=="left" or $dir=="before") {
        border-right-color: $color;
    }
}


/**
 * Vertical Align
 *
 * @example
 *      @include vertical-align;
 */

@mixin vertical-align {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}


/**
 * Animation
 *
 * @param {string} $animation
 * @param {number} $duration
 * @param {type} $timing (ease)
 * @param {number} $delay (0)
 * @param {type} $iteration (initial)
 * @param {type} $direction (normal)
 * @param {type} $playstate (running)
 * @param {type} $fillmode (forwards)
 *
 * @example
 *     @include animation(changecolour, 5s, linear, 0, infinite, normal, running);
 *
 */

@mixin animation ($animation, $duration, $timing: ease, $delay: 0, $iteration: initial, $direction: normal, $playstate: running, $fillmode: forwards) {
    animation-name: $animation;
    animation-duration: $duration;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-iteration-count: $iteration;
    animation-direction: $direction;
    animation-play-state: $playstate;
    animation-fill-mode: $fillmode;
}

/**
 * Background linear gradient, intended for use with `$wowcher-blue`
 * @param  {string}
 * @param  {string}
 * @example
 *     @include linear-gradient(#f00);
 */
 @mixin linear-gradient($from, $to, $direction: to bottom) {
    background: $from;
    background: linear-gradient($direction, $from 0%, $to 100%);
 }
